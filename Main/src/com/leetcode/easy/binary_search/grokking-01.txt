package com.leetcode.test;

public class Solution {

    public static int binarySearch (int[] nums, int key) {

        int leftIndex = 0;
        int rightIndex = nums.length - 1;

        boolean isAscending = nums[leftIndex] < nums[rightIndex];

        while (leftIndex <= rightIndex) {

            //  Make middle index the pivot index
            int pivotIndex = leftIndex + (rightIndex - leftIndex) / 2;

            if (nums[pivotIndex] == key) {
                return pivotIndex;
            }

            if (isAscending) {
                //  Sorted in ascending order
                if (nums[pivotIndex] < key) {
                //  pivotIndex needs to be bigger to match key
                    leftIndex = pivotIndex + 1;
                } else if (nums[pivotIndex] > key) {
                //  Remaining possibility: nums[pivotIndex] > key
                //  pivotIndex needs to be smaller to match key
                    rightIndex = pivotIndex - 1;
                }
            } else {
                //  Sorted in descending order
                if (nums[pivotIndex] > key) {
                    //  pivotIndex needs to be smaller to match key
                    leftIndex = pivotIndex + 1;
                } else if (nums[pivotIndex] < key) {
                    //  Remaining possibility: nums[pivotIndex] < key
                    //  pivotIndex needs to be greater to match key
                    rightIndex = pivotIndex - 1;
                }
            }
        }

        return -1;
    }

    public static void main(String[] args) {

        //  In ascending order
        int[] nums1 = {1, 2, 3, 4, 5, 6, 7};
        int key1 = 5;
        int[] nums2 = {1, 2, 5, 6, 7};
        int key2 = 2;
        int[] nums3 = {1, 2, 3, 4, 5, 6, 7};
        int key3 = 7;

        //  In descending order
        int[] numsD1 = {7, 6, 5, 4, 3, 2, 1};
        int keyD1 = 5;
        int[] numsD2 = {7, 6, 5, 4, 3};
        int keyD2 = 2;
        int[] numsD3 = {7, 6, 5, 4, 3, 2, 1};
        int keyD3 = 7;

        System.out.println(binarySearch(nums1, key1));
        System.out.println(binarySearch(nums2, key2));
        System.out.println(binarySearch(nums3, key3));

        System.out.println(binarySearch(numsD1, keyD1));
        System.out.println(binarySearch(numsD2, keyD2));
        System.out.println(binarySearch(numsD3, keyD3));

    }
}
